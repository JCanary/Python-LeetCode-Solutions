// 7ms Runtime Beats 41.69%
// 18.03MB Memory Beats 21.11%
class Solution:
    def romanToInt(self, s: str) -> int:
        # Dictionary for roman numerals
        numerals = {
            "I" : 1,
            "IV" : 4,
            "V" : 5,
            "IX" : 9,
            "X" : 10,
            "XL" : 40,
            "L" : 50,
            "XC" : 90,
            "C" : 100,
            "CD" : 400,
            "D" : 500,
            "CM" : 900,
            "M" : 1000,    
        }

        # Gathers roman numeral
        raw_numeral = s
        # Makes numeral uppercase
        upper_numeral = raw_numeral.upper()

        # The long way around
        M = upper_numeral.count("M")
        CM = upper_numeral.count("CM")
        D = upper_numeral.count("D")
        CD = upper_numeral.count("CD")
        C = upper_numeral.count("C")
        XC = upper_numeral.count("XC")
        L = upper_numeral.count("L")
        XL = upper_numeral.count("XL")
        X = upper_numeral.count("X")
        IX = upper_numeral.count("IX")
        V = upper_numeral.count("V")
        IV = upper_numeral.count("IV")
        I = upper_numeral.count("I")

        # Flow controls for redundant numerals
        if I >= 1 and IV or IX == 1:
            I = I - (IV + IX) 

        if V >= 1 and IV == 1:
            V = V - 1

        if X >= 1 and IX or XL or XC == 1:
            X = X - (IX + XL + XC)

        if L >= 1 and XL == 1:
            L = L - 1

        if C >= 1 and XC or CD or CM== 1:
            C = C - (XC + CD + CM)

        if D >= 1 and CD == 1:
            D = D - 1

        if M >= 1 and CM == 1:
            M = M - 1
            
        # Adding everything together
        # f is short for final
        f_I = I * numerals["I"]
        f_IV = IV * numerals["IV"]
        f_V = V * numerals["V"]
        f_IX = IX * numerals["IX"]
        f_X = X * numerals["X"]
        f_XL = XL * numerals["XL"]
        f_L = L * numerals["L"]
        f_XC = XC * numerals["XC"]
        f_C = C * numerals["C"]
        f_CD = CD * numerals["CD"]
        f_D = D * numerals["D"]
        f_CM = CM * numerals["CM"]
        f_M = M * numerals["M"]

        F = f_I + f_IV + f_V + f_IX + f_X + f_XL + f_L + f_XC + f_C + f_CD + f_D + f_CM + f_M

        print(F)
        return int(F)
